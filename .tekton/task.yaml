apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-workspace-task
spec:
  params:
    - name: API_KEY
      description: the ibmcloud api key
    - name: WORKSPACE_ID
      description: the workspace id
  workspaces:
  - name: task-ws
    mountPath: /artifacts
  steps:
    - name: update-workspace
      image: ibmcom/pipeline-base-image
      env:
        - name: API_KEY
          value: $(params.API_KEY)
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Workspace $WORKSPACE_ID"
          # force login (required by schematics cli)
          ibmcloud login --apikey $API_KEY -a "https://cloud.ibm.com" --no-region
          # get schematics workspace as json
          WORKSPACE=$(ibmcloud terraform workspace get -i $WORKSPACE_ID --json)
          echo "Updating Schematics workspace from environment variables..."
          # iterate over ALL schematics worskpace variables to see if there is a matching env var
          for KEY in $(echo $WORKSPACE | jq ".template_data[0].values_metadata[].name" -r); do
              
              # if the value exists as an env var, update the workspace
              if [ -n "${!KEY}" ]; then
                  echo "$KEY found with value '${!KEY}'"; 
                  SEARCH=$(echo $WORKSPACE | jq ".template_data[0].variablestore[].name")
                  
                  if [[ "$SEARCH" =~ .*"$KEY".* ]]; then
                      #echo "It's there, update it."
                      WORKSPACE=$(echo $WORKSPACE | jq -r \
                          --arg updateKey "$KEY" \
                          --arg updateVal "${!KEY}" \
                          '.template_data[0].variablestore = [.template_data[0].variablestore[] | if (.name == $updateKey) then (.value = $updateVal) else . end]' )
                  else 
                      #echo "It's NOT there, add it."
                      WORKSPACE=$(echo $WORKSPACE | jq -r ".template_data[0].variablestore[.template_data[0].variablestore| length] |= . + { \"name\": \"$KEY\", \"value\": \"${!KEY}\", \"type\": \"string\" }")
                      
                  fi
              fi
          done
          echo $WORKSPACE > workspace.json
          ibmcloud terraform workspace update --id $WORKSPACE_ID --file workspace.json
          # cleanup
          rm -f workspace.json
          unset WORKSPACE
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: plan-task
spec:
  params:
    - name: API_KEY
      description: the ibmcloud api key
    - name: WORKSPACE_ID
      description: the workspace id
  workspaces:
  - name: task-ws
    mountPath: /artifacts
  steps:
    - name: terraform-plan
      image: ibmcom/pipeline-base-image
      env:
        - name: API_KEY
          value: $(params.API_KEY)
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
      command: ["/bin/sh", "-c"]
      args:
        - |
          ibmcloud login --apikey $API_KEY -a "https://cloud.ibm.com" --no-region
          # run terraform plan
          echo "ibmcloud terraform plan --id $WORKSPACE_ID"
          ACTIVITY=$(ibmcloud terraform plan -id $WORKSPACE_ID --json)
          ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
          echo "Activity ID   $ACTIVITY_ID"
          # poll until status is no longer INPROGRESS, or if there is an error
          while :
          do
            STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS
              exit $RET_VAL
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "FAILED" ]; then 
                ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
                exit 1
              elif [ "$STATUS_VALUE" != "INPROGRESS" ] && [ "$STATUS_VALUE" != "CREATED" ]; then  
                break
              fi
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
          ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: apply-task
spec:
  params:
    - name: API_KEY
      description: the ibmcloud api key
    - name: WORKSPACE_ID
      description: the workspace id
  workspaces:
  - name: task-ws
    mountPath: /artifacts
  steps:
    - name: terraform-apply
      image: ibmcom/pipeline-base-image
      env:
        - name: API_KEY
          value: $(params.API_KEY)
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
      command: ["/bin/sh", "-c"]
      args:
        - |
          ibmcloud login --apikey $API_KEY -a "https://cloud.ibm.com" --no-region
          # run terraform apply
          echo "ibmcloud terraform apply --id $WORKSPACE_ID --force"
          ACTIVITY=$(ibmcloud terraform apply -id $WORKSPACE_ID --json --force)
          ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
          echo "Activity ID   $ACTIVITY_ID"
          # poll until status is no longer INPROGRESS, or if there is an error
          while :
          do
            STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS
              exit $RET_VAL
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "FAILED" ]; then
                ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
                exit 1
              elif [ "$STATUS_VALUE" != "INPROGRESS" ]; then  
                break
              fi
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
          ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: test-task
spec:
  workspaces:
  - name: task-ws
    mountPath: /artifacts
  steps:
    - name: check-health
      image: ibmcom/pipeline-base-image
      command: ["/bin/sh", "-c"]
      args:
        -  echo "You can add tests here to ensure that your resources are healthy!"
