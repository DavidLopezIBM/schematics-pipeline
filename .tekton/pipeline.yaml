apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline
spec:
  workspaces:
    - name: pipeline-ws
  params:
    - name: API_KEY
      description: the ibmcloud api key
    - name: WORKSPACE_ID
      description: the workspace id
    - name: repository
      description: the git repo
    - name: branch
      description: branch
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: commit-id
      description: commit id
    - name: commit-timestamp
      description: commit timestamp
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
    - name: project-id
      description: project id
      default: ""
    - name: scm-type
      description: source code type used (github, github-ent, gitlab)
      default: "github"
    - name: tf-dir
      description: the directory where the terraform main entry file is found
      default: ""
    - name: policy-config-json
      description: Configure policies to control thresholds
      default: ""
    - name: tf-var-file
      description: (optional) terraform var-file
      default: ""
  tasks:
    - name: extract-repository-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          # if a params.repository is given, it takes precedence
          value: '. as $toolchain | ["$(params.repository)"] | if .[0]=="" then $toolchain | .services[] | select(.toolchain_binding.name=="repo") | .dashboard_url else .[0] end'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: cra-fetch-repo
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: API_KEY
          value: "apikey"
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: task-ws
          workspace: pipeline-ws
    - name: cra-terraform-scan
      when:
        - input: "$(params.tf-dir)"
          operator: notin
          values: [""]
      runAfter:
        - cra-fetch-repo
      taskRef:
        name: cra-terraform-scan
      workspaces:
        - name: task-ws
          workspace: pipeline-ws
        - name: secrets
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.commit-id)
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id)
        - name: directory-name
          value: ""
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: tf-dir
          value: $(params.tf-dir)
        - name: policy-config-json
          value: $(params.policy-config-json)
        - name: tf-var-file
          value: $(params.tf-var-file)
    - name: update-workspace
      runAfter: [cra-terraform-scan]
      taskRef:
        name: update-workspace-task
      workspaces:
        - name: task-ws
          workspace: pipeline-ws
      params:
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
        - name: API_KEY
          value: $(params.API_KEY)
    - name: plan
      runAfter: [update-workspace]
      taskRef:
        name: plan-task
      workspaces:
        - name: task-ws
          workspace: pipeline-ws
      params:
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
        - name: API_KEY
          value: $(params.API_KEY)
    - name: apply
      runAfter: [plan]
      taskRef:
        name: apply-task
      workspaces:
        - name: task-ws
          workspace: pipeline-ws
      params:
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
        - name: API_KEY
          value: $(params.API_KEY)
    - name: test
      runAfter: [apply]
      workspaces:
        - name: task-ws
          workspace: pipeline-ws
      taskRef:
        name: test-task
